import json
import logging
import os
from datetime import datetime, date, time, timedelta

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------------- CONFIG ----------------
BOT_TOKEN = os.environ.get('BOT_TOKEN', '')  # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.environ.get('ADMIN_ID', '0'))
MASTER_NAME = "–î–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN not set! Please set environment variable.")
    exit(1)

if not ADMIN_ID:
    logging.error("‚ùå ADMIN_ID not set! Please set environment variable.")
    exit(1)

WORK_START = (10, 0)   # 10:00
WORK_END = (22, 0)     # 22:00
INTERVAL_MIN = 45      # —à–∞–≥ 45 –º–∏–Ω—É—Ç
DAYS_AHEAD = 7         # –¥–∞—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π

DATA_FILE = "bookings.json"

# –£—Å–ª—É–≥–∏
SERVICES = [
    {"id": 1, "name": "–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": "80,000 —Å—É–º"},
    {"id": 2, "name": "–ë–æ—Ä–æ–¥–∞", "price": "50,000 —Å—É–º"},
    {"id": 3, "name": "–°—Ç—Ä–∏–∂–∫–∞ + —É–∫–ª–∞–¥–∫–∞", "price": "100,000 —Å—É–º"},
    {"id": 4, "name": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å", "price": "150,000 —Å—É–º"},
]

# ---------------- LOG ----------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ---------------- Storage helpers ----------------
def load_bookings():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
            else:
                return []
    except Exception as e:
        logger.error("Error loading bookings: %s", e)
        return []

def save_bookings(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error("Error saving bookings: %s", e)

def booking_id():
    return int(datetime.now().timestamp() * 1000)

# ---------------- Helpers: dates & times ----------------
def generate_dates(n=DAYS_AHEAD):
    today = date.today()
    return [today + timedelta(days=i) for i in range(1, n+1)]

def generate_times():
    times = []
    cur = datetime.combine(date.today(), time(hour=WORK_START[0], minute=WORK_START[1]))
    end_dt = datetime.combine(date.today(), time(hour=WORK_END[0], minute=WORK_END[1]))
    while cur <= end_dt:
        times.append(cur.time().strftime("%H:%M"))
        cur += timedelta(minutes=INTERVAL_MIN)
    return times

def slot_is_free(bookings, date_iso, time_str):
    for b in bookings:
        if b.get("date") == date_iso and b.get("time") == time_str and b.get("status") == "confirmed":
            return False
    return True

# ---------------- Handlers ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    
    kb = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
    ]
    
    if update.message:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É {MASTER_NAME}. ‚ú®\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        await update.callback_query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É {MASTER_NAME}. ‚ú®\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

async def handle_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data["selected_services"] = []
    
    await query.edit_message_text(
        "üìù *–ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíá –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ ‚Äî 80,000 —Å—É–º", callback_data="svc_1")],
            [InlineKeyboardButton("üßî –ë–æ—Ä–æ–¥–∞ ‚Äî 50,000 —Å—É–º", callback_data="svc_2")],
            [InlineKeyboardButton("‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ + —É–∫–ª–∞–¥–∫–∞ ‚Äî 100,000 —Å—É–º", callback_data="svc_3")],
            [InlineKeyboardButton("üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å ‚Äî 150,000 —Å—É–º", callback_data="svc_4")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="svc_done")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_start")],
        ]),
        parse_mode='Markdown'
    )

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "svc_done":
        if not context.user_data.get("selected_services"):
            await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É", show_alert=True)
            return
        
        dates = generate_dates()
        kb = []
        for d in dates:
            day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            day_name = day_names[d.weekday()]
            kb.append([InlineKeyboardButton(f"üìÖ {d.strftime('%d.%m.%Y')} ({day_name})", callback_data=f"date_{d.isoformat()}")])
        kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_services")])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        sid = int(data.split("_")[1])
        sel = context.user_data.get("selected_services", [])
        if sid in sel:
            sel.remove(sid)
        else:
            sel.append(sid)
        context.user_data["selected_services"] = sel
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏
        kb = []
        for s in SERVICES:
            prefix = "‚úÖ " if s["id"] in sel else ""
            kb.append([InlineKeyboardButton(f"{prefix}{s['name']} ‚Äî {s['price']}", callback_data=f"svc_{s['id']}")])
        kb.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="svc_done")])
        kb.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_start")])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏):",
            reply_markup=InlineKeyboardMarkup(kb)
        )

async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_services":
        sel = context.user_data.get("selected_services", [])
        kb = []
        for s in SERVICES:
            prefix = "‚úÖ " if s["id"] in sel else ""
            kb.append([InlineKeyboardButton(f"{prefix}{s['name']} ‚Äî {s['price']}", callback_data=f"svc_{s['id']}")])
        kb.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="svc_done")])
        kb.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_start")])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏):",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    else:
        iso_date = data.replace("date_", "")
        context.user_data["date"] = iso_date
        
        sel_date = context.user_data.get("date")
        bookings = load_bookings()
        all_times = generate_times()
        
        buttons = []
        for t in all_times:
            if slot_is_free(bookings, sel_date, t):
                buttons.append(InlineKeyboardButton(t, callback_data=f"time_{t}"))
            else:
                buttons.append(InlineKeyboardButton(f"‚ùå {t}", callback_data="busy"))
        
        rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
        rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_dates")])
        
        date_display = datetime.fromisoformat(sel_date).strftime('%d.%m.%Y')
        await query.edit_message_text(
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {date_display}:",
            reply_markup=InlineKeyboardMarkup(rows)
        )

async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_dates":
        dates = generate_dates()
        kb = []
        for d in dates:
            day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            day_name = day_names[d.weekday()]
            kb.append([InlineKeyboardButton(f"üìÖ {d.strftime('%d.%m.%Y')} ({day_name})", callback_data=f"date_{d.isoformat()}")])
        kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_services")])
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
    elif data == "busy":
        await query.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç –∑–∞–Ω—è—Ç", show_alert=True)
    else:
        time_str = data.replace("time_", "")
        
        bookings = load_bookings()
        if not slot_is_free(bookings, context.user_data["date"], time_str):
            await query.answer("–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è–ª–∏", show_alert=True)
            return
        
        context.user_data["time"] = time_str
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    context.user_data["name"] = name
    
    contact_keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]]
    await update.message.reply_text(
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(contact_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    
    digits = ''.join(filter(str.isdigit, phone))
    if len(digits) < 9:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    context.user_data["phone"] = phone
    
    services = [s["name"] for s in SERVICES if s["id"] in context.user_data.get("selected_services", [])]
    dt = context.user_data["date"]
    tm = context.user_data["time"]
    
    summary = (
        f"# Zapis.uz\n"
        f"## *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:*\n\n"
        f"- –ò–º—è: {context.user_data['name']}\n"
        f"  –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"- –£—Å–ª—É–≥–∏: {', '.join(services)}\n"
        f"  –î–∞—Ç–∞: {datetime.fromisoformat(dt).strftime('%d.%m.%Y')}\n"
        f"  –í—Ä–µ–º—è: {tm}\n"
        f"  –ú–∞—Å—Ç–µ—Ä: {MASTER_NAME}\n\n"
        f"---\n"
    )
    
    kb = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_book")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_flow")]
    ]
    
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(kb))

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel_flow":
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        context.user_data.clear()
        return
    
    if data == "confirm_book":
        bookings = load_bookings()
        dt = context.user_data["date"]
        tm = context.user_data["time"]
        
        if not slot_is_free(bookings, dt, tm):
            await query.answer("–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è–ª–∏", show_alert=True)
            return
        
        b_id = booking_id()
        services = [s["name"] for s in SERVICES if s["id"] in context.user_data.get("selected_services", [])]
        
        booking = {
            "id": b_id,
            "user_id": str(query.from_user.id),
            "name": context.user_data["name"],
            "phone": context.user_data["phone"],
            "services": services,
            "date": dt,
            "time": tm,
            "status": "confirmed",
            "created": datetime.now().isoformat()
        }
        
        bookings.append(booking)
        save_bookings(bookings)
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=(
                    f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å #{b_id}\n"
                    f"üë§ {booking['name']}\n"
                    f"üìû {booking['phone']}\n"
                    f"üíà {', '.join(services)}\n"
                    f"üìÖ {dt} {tm}\n\n"
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: /delete_{b_id}"
                )
            )
        except Exception as e:
            logger.error("Admin notify error: %s", e)
        
        # –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        date_display = datetime.fromisoformat(dt).strftime('%d.%m.%Y')
        
        final_text = (
            f"### –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ {MASTER_NAME}!\n\n"
            f"- –£—Å–ª—É–≥–∏: {', '.join(services)}\n"
            f"  –î–∞—Ç–∞: {date_display}\n"
            f"  –í—Ä–µ–º—è: {tm}\n"
            f"  –ò–º—è: {context.user_data['name']}\n"
            f"  –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
            f"---\n\n"
            f"### –ñ–¥–µ–º –≤–∞—Å!\n\n"
            f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:\n"
            f"01:00\n\n"
            f"---\n"
        )
        
        kb = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{b_id}")],
        ]
        
        await query.message.reply_text(
            final_text,
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode='Markdown'
        )
        
        context.user_data.clear()

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("cancel_"):
        try:
            bid = int(query.data.replace("cancel_", ""))
        except ValueError:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)
            return
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å #{bid}")
        
        bookings = load_bookings()
        
        for i, b in enumerate(bookings):
            if b.get("id") == bid and b.get("status") == "confirmed":
                if str(b.get("user_id")) != str(query.from_user.id):
                    await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å", show_alert=True)
                    return
                
                # –û–¢–ú–ï–ù–Ø–ï–ú –ó–ê–ü–ò–°–¨
                bookings[i]["status"] = "cancelled"
                bookings[i]["cancelled_at"] = datetime.now().isoformat()
                bookings[i]["cancelled_by"] = "client"
                save_bookings(bookings)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                try:
                    await context.bot.send_message(
                        ADMIN_ID, 
                        f"‚ùå –ö–õ–ò–ï–ù–¢ –û–¢–ú–ï–ù–ò–õ –ó–ê–ü–ò–°–¨ #{bid}\n"
                        f"üë§ {b.get('name')} ({b.get('phone')})\n"
                        f"üìÖ {b.get('date')} {b.get('time')}\n"
                        f"üíà {', '.join(b.get('services', []))}"
                    )
                except Exception as e:
                    logger.error("Admin notify error: %s", e)
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                date_display = datetime.fromisoformat(b.get('date')).strftime('%d.%m.%Y')
                
                await query.edit_message_text(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n"
                    f"üìÖ {date_display} {b.get('time')}\n"
                    f"üíà {', '.join(b.get('services', []))}\n\n"
                    f"–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
                    parse_mode='Markdown'
                )
                return
        
        await query.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_start":
        await start(update, context)

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ê–î–ú–ò–ù–ê
async def admin_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    bookings = load_bookings()
    active_bookings = [b for b in bookings if b.get('status') == 'confirmed']
    
    if not active_bookings:
        await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        return
    
    text = "üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:*\n\n"
    kb = []
    
    for b in active_bookings:
        date_display = datetime.fromisoformat(b['date']).strftime('%d.%m.%Y')
        text += f"üîπ {date_display} {b['time']}\n"
        text += f"   üë§ {b.get('name')} ({b.get('phone')})\n"
        text += f"   üíà {', '.join(b.get('services', []))}\n"
        text += f"   ID: #{b.get('id')}\n\n"
        
        kb.append([InlineKeyboardButton(
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {date_display} {b['time']}", 
            callback_data=f"admin_cancel_{b['id']}"
        )])
    
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode='Markdown'
    )

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´ –ê–î–ú–ò–ù–û–ú
async def handle_admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("admin_cancel_"):
        try:
            bid = int(query.data.replace("admin_cancel_", ""))
        except ValueError:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)
            return
        
        if query.from_user.id != ADMIN_ID:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏", show_alert=True)
            return
        
        logger.info(f"–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å #{bid}")
        
        bookings = load_bookings()
        booking_found = False
        
        for i, b in enumerate(bookings):
            if b.get("id") == bid and b.get("status") == "confirmed":
                booking_found = True
                
                # –û–¢–ú–ï–ù–Ø–ï–ú –ó–ê–ü–ò–°–¨
                bookings[i]["status"] = "cancelled"
                bookings[i]["cancelled_at"] = datetime.now().isoformat()
                bookings[i]["cancelled_by"] = "admin"
                save_bookings(bookings)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    user_id = int(b.get('user_id'))
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n"
                            f"üìÖ {datetime.fromisoformat(b['date']).strftime('%d.%m.%Y')} {b['time']}\n"
                            f"üíà {', '.join(b.get('services', []))}\n\n"
                            f"–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Error notifying user: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                await query.edit_message_text(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å #{bid} –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
                    f"üë§ {b.get('name')} ({b.get('phone')})\n"
                    f"üìÖ {b.get('date')} {b.get('time')}\n"
                    f"üíà {', '.join(b.get('services', []))}",
                    parse_mode='Markdown'
                )
                break
        
        if not booking_found:
            await query.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –£–î–ê–õ–ï–ù–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù–ê
async def handle_delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command = update.message.text
    if command.startswith('/delete_'):
        try:
            bid = int(command.replace('/delete_', ''))
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏")
            return
        
        bookings = load_bookings()
        booking_found = False
        
        for i, b in enumerate(bookings):
            if b.get("id") == bid and b.get("status") == "confirmed":
                booking_found = True
                
                # –û–¢–ú–ï–ù–Ø–ï–ú –ó–ê–ü–ò–°–¨
                bookings[i]["status"] = "cancelled"
                bookings[i]["cancelled_at"] = datetime.now().isoformat()
                bookings[i]["cancelled_by"] = "admin"
                save_bookings(bookings)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    user_id = int(b.get('user_id'))
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=(
                            f"‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n"
                            f"üìÖ {datetime.fromisoformat(b['date']).strftime('%d.%m.%Y')} {b['time']}\n"
                            f"üíà {', '.join(b.get('services', []))}\n\n"
                            f"–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Error notifying user: {e}")
                
                await update.message.reply_text(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å #{bid} –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
                    f"üë§ {b.get('name')} ({b.get('phone')})\n"
                    f"üìÖ {b.get('date')} {b.get('time')}\n"
                    f"üíà {', '.join(b.get('services', []))}",
                    parse_mode='Markdown'
                )
                break
        
        if not booking_found:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

# ---------------- MAIN ----------------
def main():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("bookings", admin_bookings))
    app.add_handler(MessageHandler(filters.Regex(r'^/delete_\d+'), handle_delete_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    app.add_handler(CallbackQueryHandler(handle_book, pattern="^book$"))
    app.add_handler(CallbackQueryHandler(handle_service, pattern="^svc_"))
    app.add_handler(CallbackQueryHandler(handle_date, pattern="^date_"))
    app.add_handler(CallbackQueryHandler(handle_time, pattern="^time_"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern="^back_"))
    app.add_handler(CallbackQueryHandler(handle_confirm, pattern="^(confirm_book|cancel_flow)$"))
    app.add_handler(CallbackQueryHandler(handle_cancel, pattern="^cancel_"))
    app.add_handler(CallbackQueryHandler(handle_admin_cancel, pattern="^admin_cancel_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler))
    app.add_handler(MessageHandler(filters.CONTACT, phone_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    while True:
        try:
            app.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"‚ùå –ë–æ—Ç —É–ø–∞–ª: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(10)

if __name__ == "__main__":
    main()